" =============== Vundle Initialization ===============
if has('vim_starting')
    set runtimepath+=~/.vim/bundle/vundle/
endif
call vundle#rc()
Bundle 'gmarik/vundle'
Bundle 'L9'

set runtimepath+=$GOROOT/misc/vim
set runtimepath+=/usr/share/go/misc/vim/

" Bundle 'yesmeck/tips.vim'
Bundle 'spolu/dwm.vim'
let g:dwm_map_keys=0
nmap ,m <Plug>DWMFocus
nmap ,n <Plug>DWMNew
nmap ,c <Plug>DWMClose
nmap ,l <Plug>DWMGrowMaster
nmap ,h <Plug>DWMShrinkMaster
nmap ,j <C-W>w
nmap ,k <C-W>W
nmap ,, <Plug>DWMRotateCounterclockwise
nmap ,. <Plug>DWMRotateClockwise

" Ruby & Rails
Bundle 'vim-ruby/vim-ruby'
Bundle 'tpope/vim-rails'
Bundle 'tpope/vim-rake'
Bundle 'tpope/vim-bundler'
Bundle 'tpope/vim-dispatch'
" ~/.vim/macros/rails.vim

Bundle 'tpope/vim-characterize'
" ga -> to print characterize
" :help digraph-table

" + to expand, - to shrink
Bundle 'terryma/vim-expand-region'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" TMUX
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Bundle 'tpope/vim-tbone'
" Tmux, Tput, Twrite, Tyank

" Send command from vim to a running tmux session
Bundle 'benmills/vimux'
" Prompt for a command to run
map <Leader>tp :VimuxPromptCommand<CR>
" Run last command executed by VimuxRunCommand
map <Leader>tl :VimuxRunLastCommand<CR>
" Inspect runner pane
map <Leader>ti :VimuxInspectRunner<CR>
" Close all other tmux panes in current window
map <Leader>tx :VimuxClosePanes<CR>
" Close vim tmux runner opened by VimuxRunCommand
map <Leader>tq :VimuxCloseRunner<CR>
" Interrupt any command running in the runner pane
map <Leader>ts :VimuxInterruptRunner<CR>
let g:VimuxHeight = "25"

Bundle 'jgdavey/vim-turbux'
let g:no_turbux_mappings = 1
let g:turbux_runner  = 'vimux'
autocmd FileType ruby map <Leader>tr <Plug>SendFocusedTestToTmux
autocmd FileType ruby map <Leader>tR <Plug>SendTestToTmux

Bundle 'benmills/vimux-golang'
autocmd FileType go map <Leader>tr :GolangTestCurrentPackage<CR>


Bundle 'mhinz/vim-signify'
let g:signify_mapping_next_hunk = '<leader>sj'
let g:signify_mapping_prev_hunk = '<leader>sk'
let g:signify_mapping_toggle = '<leader>sh'
let g:signify_mapping_toggle_highlight = '<leader>sl'

Bundle 'jade.vim'
Bundle 'tpope/vim-ragtag'
" <C-X>= <C-X>+ <C-X>- <C-X>_ <C-X>' <C-X>" <C-X><Space> <C-X><CR> <C-X>/ <C-X>! <C-X>@ <C-X># <C-X>$
Bundle 'tpope/vim-eunuch'
" :Unlink :Remove :Rename :SudoWrite :W
Bundle 'tpope/vim-unimpaired'
" ]o, [o, ]n, [n
" ]e, [e               Exchange the current line with lines above/below it
" ]<Space>, [<Spance>  Add [count] blank lines above/below the cursor.
" `[x` XML encode, `]x` XML decode, `[u` URL encode, `]u` URL decode, `[y` C String encode, `]y` C String decode

let g:surround_{char2nr('-')} = "<% \r %>"
let g:surround_{char2nr('=')} = "<%= \r %>"
let g:surround_{char2nr('8')} = "/* \r */"
let g:surround_{char2nr('s')} = " \r"
let g:surround_{char2nr('^')} = "/^\r$/"
let g:surround_indent = 1
Bundle 'tpope/vim-surround'
" cs'<q>, cst", dst, ys2w), yss), v<move>S)

Bundle 'tpope/vim-abolish'
" :Abolish {despa,sepe}rat{e,es,ed,ing,ely,ion,ions,or}  {despe,sepa}rat{}
" :%Subvert/facilit{y,ies}/building{,s}/g

" GIT
Bundle 'tpope/vim-git'
Bundle 'tpope/vim-fugitive'
Bundle 'int3/vim-extradite'
Bundle 'gregsexton/gitv'
Bundle 'tpope/vim-rhubarb'
autocmd FileType gitcommit nmap <buffer> U :Git checkout -- <C-r><C-g><CR>
" ~/.vim/bundle/vim-fugitive/doc/fugitive.txt
map <LocalLeader>gs :Gstatus<CR>
map <LocalLeader>gb :Gblame<CR>
map <LocalLeader>gd :Git! diff %<CR>
map <LocalLeader>gD :Git! diff<CR>
map <LocalLeader>gc :Gcommit<CR>
map <LocalLeader>gl :Extradite<CR>
map <LocalLeader>gv :Gitv<CR>


Bundle 'Gist.vim'

Bundle 'VisIncr'
Bundle 'Align'

Bundle 'tComment'
" ~/.vim/bundle/tComment/doc/tcomment.txt

Bundle 'mileszs/ack.vim'
" let g:ackprg = 'ag --nogroup --nocolor --column' " the_silver_searcher
nmap <Leader>a :Ack <C-R><C-W>
" copy visual value to register 'z' first
vmap <Leader>a "zy:Ack <C-R>z
" o (open) go (preview open) t (tab) T (new tab silently) v (vertical) gv q (close)

" Bundle 'ZoomWin'

" Snippet
Bundle 'JazzCore/neocomplcache-ultisnips'
Bundle 'SirVer/ultisnips'
let g:UltiSnipsExpandTrigger="<Tab>"
let g:UltiSnipsJumpForwardTrigger="<Tab>"
let g:UltiSnipsJumpBackwardTrigger="<S-Tab>"

" Bundle 'honza/vim-snippets'
" Bundle 'Shougo/neosnippet'
" " Plugin key-mappings.
" imap <C-k>     <Plug>(neosnippet_expand_or_jump)
" smap <C-k>     <Plug>(neosnippet_expand_or_jump)
" " SuperTab like snippets behavior.
" imap <expr><TAB> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-n>" : "\<TAB>"
" smap <expr><TAB> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
"
" " For snippet_complete marker.
" if has('conceal')
"     set conceallevel=2 concealcursor=i
" endif
" let g:neosnippet#snippets_directory='~/.vim/bundle/vim-snippets/snippets'
" let g:neosnippet#enable_snipmate_compatibility = 1

Bundle 'Shougo/neocomplcache'
let g:neocomplcache_enable_at_startup = 1
let g:neocomplcache_enable_smart_case = 1
let g:neocomplcache_enable_camel_case_completion = 1
let g:neocomplcache_enable_underbar_completion = 1
let g:neocomplcache_auto_completion_start_length = 1
let g:neocomplcache_min_syntax_length = 3
let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'
let g:neocomplcache_max_list = 25
let g:neocomplcache_enable_auto_select = 1
let g:neocomplcache_enable_fuzzy_completion = 1
let g:neocomplcache_fuzzy_completion_start_length = 2
let g:neocomplcache_enable_cursor_hold_i = 0
let g:neocomplcache_cursor_hold_i_time = 300
let g:neocomplcache_enable_insert_char_pre = 0
let g:neocomplcache_enable_prefetch = 1

let g:neocomplcache_dictionary_filetype_lists = {
            \ 'default' : ''
            \ }

if !exists('g:neocomplcache_wildcard_characters')
    let g:neocomplcache_wildcard_characters = {}
endif
let g:neocomplcache_wildcard_characters._ = '-'
let g:neocomplcache_enable_auto_delimiter = 1

inoremap <expr><C-y> neocomplcache#cancel_popup()
inoremap <expr><C-g> neocomplcache#undo_completion()>
" Enable heavy omni completion.
if !exists('g:neocomplcache_omni_patterns')
    let g:neocomplcache_omni_patterns = {}
endif

autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete
autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1
autocmd FileType ruby,eruby let g:rubycomplete_rails = 1

let g:neocomplcache_omni_patterns.ruby = '[^. *\t]\.\w*\|\h\w*::'
let g:neocomplcache_omni_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
let g:neocomplcache_omni_patterns.c = '\%(\.\|->\)\h\w*'
let g:neocomplcache_omni_patterns.cpp = '\h\w*\%(\.\|->\)\h\w*\|\h\w*::'

let g:neocomplcache_omni_functions = {
            \ 'ruby' : 'rubycomplete#Complete',
            \ 'eruby' : 'htmlcomplete#CompleteTags',
            \ }


Bundle 'jsbeautify'
Bundle 'MultipleSearch'
Bundle 'reorder-tabs'
" <M-PgUp> / <M-PgDn>

Bundle 'sessionman.vim'
map <Leader>s :SessionList<CR>
" :SessionClose :SessionList :SessionOpen :SessionOpenLast :SessionSave :SessionSaveAs :SessionShowLast

Bundle 'scrooloose/nerdtree'
Bundle 'Glob-Edit'
" :edit plugin/*vim

Bundle 'tsaleh/vim-matchit'
" Bundle 'sketch.vim'
" Bundle 'hallettj/jslint.vim'
Bundle 'tyru/current-func-info.vim'

" Maintains a history of yanks
Bundle 'YankRing.vim'
map <LocalLeader>p :YRShow<CR>
let g:yankring_history_dir = '~/.cache/vim'
" s search, also have value in clipboard

" LaTex
" Bundle 'imaps.vim'
" Bundle 'gerw/vim-latex-suite'

Bundle 'Raimondi/delimitMate'
" automatic closing of quotes, parenthesis, brackets

" ColorScheme
Bundle 'tpope/vim-vividchalk'

" Syntax Support
Bundle 'zim-syntax'
Bundle 'juvenn/mustache.vim'
Bundle 'tpope/vim-haml'
Bundle 'tpope/vim-markdown'
Bundle 'tpope/vim-liquid'
Bundle 'kchmck/vim-coffee-script'
Bundle 'kogent/vim-nagios'
Bundle 'pangloss/vim-javascript'
Bundle 'cespare/mxml.vim'
Bundle 'nono/jquery.vim'
Bundle 'actionscript.vim'
Bundle 'sunaku/vim-ruby-minitest'

" Preview:
" markdown (gem: bluecloth), rdoc (gem: github-markup), textile (gem: RedCloth)
" ronn (gem: ronn), html, reStructuredText (gem: RbST) and (util: rst2html)
let g:PreviewBrowsers='chromium,firefox'
Bundle 'greyblake/vim-preview'

Bundle 'LargeFile'

" Bundle 'css_color.vim'
" Bundle 'skammer/vim-css-color'
" let g:cssColorVimDoNotMessMyUpdatetime = 0
Bundle 'VIM-Color-Picker'
" <F6> :ColorPicker
Bundle 'thinca/vim-quickrun'
" :QuickRun ruby / :QuickRun
Bundle 'Lokaltog/vim-easymotion'
" <Leader><Leader> f/F/w/e/b/ge/j/k
Bundle 'spiiph/vim-space'
" smart <Space>

Bundle 'sjl/gundo.vim'
let g:gundo_width = 60
let g:gundo_preview_height = 22
map <F9> :GundoToggle<CR>

Bundle 'Yggdroot/indentLine'
let g:indentLine_enabled=0
" map <F7> :IndentGuidesToggle <CR>

Bundle 'Lokaltog/vim-powerline'
let g:Powerline_stl_path_style='full'
autocmd! bufwritepost .vimrc source ~/.vimrc
autocmd! bufwritepost .vimrc call Pl#Load()
autocmd! BufREAD * call Pl#Load()
autocmd! BufDelete * call Pl#Load()

Bundle 'gregsexton/MatchTag'
Bundle 'bronson/vim-visual-star-search'

Bundle 'majutsushi/tagbar'
nmap <F8> :TagbarToggle<CR>
Bundle 'AutoTag'

Bundle 'kien/ctrlp.vim'
let g:ctrlp_extensions = ['changes', 'line', 'tag', 'buffertag']
let g:ctrlp_lazy_update = 1
let g:ctrlp_max_files = 20000
let g:ctrlp_max_depth = 8
let g:ctrlp_use_caching = 1
let g:ctrlp_show_hidden = 1
let g:ctrlp_clear_cache_on_exit = 1
let g:ctrlp_cache_dir = $HOME.'/.cache/ctrlp'
let g:ctrlp_mruf_last_entered = 1
let g:ctrlp_follow_symlinks = 1
let g:ctrlp_max_height = 35
let g:ctrlp_match_window_reversed = 0
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_custom_ignore = {
            \ 'dir':  '\.git$\|\.hg$\|\.svn$\|public\/system$\|tmp$',
            \ 'file': '\.jpg$\|\.png$\|\.gif$\|tags$'
            \ }
let g:ctrlp_user_command = {
            \ 'types': {
            \ 1: ['.git', 'cd %s && git ls-files -oc --exclude-standard'],
            \ 2: ['.hg', 'hg --cwd %s locate -I .'],
            \ },
            \ 'fallback': 'find %s -type f'
            \ }
" let g:ctrlp_prompt_mappings = {
"       \ 'PrtSelectMove("j")':   ['<c-n>'],
"       \ 'PrtSelectMove("k")':   ['<c-p>'],
"       \ 'PrtHistory(-1)':       ['<c-j>'],
"       \ 'PrtHistory(1)':        ['<c-k>']
"       \}

let g:ctrlp_cmd = 'CtrlP'
map <Leader>b :CtrlPBuffer<CR>
map <Leader>r :CtrlPMRUFiles<CR>
map <Leader>gr :CtrlPRoot<CR>
map <Leader>gf :CtrlPCurFile<CR>
map <Leader>gd :CtrlPCurWD<CR>
map <Leader>gl :CtrlPLine<CR>
map <Leader>gg :CtrlPTag<CR>
map <Leader>gb :CtrlPBufTag<CR>
map <Leader>gB :CtrlPBufTagAll<CR>
map <Leader>gq :CtrlPQuickfix<CR>
map <Leader>gc :CtrlPChange<CR>
map <Leader>gC :CtrlPChangeAll<CR>
map <Leader>gm :CtrlPMixed<CR>
map <Leader>gc :CtrlPChange<CR>
map <Leader>gp :CtrlPRTS<CR>
let g:ctrlp_buftag_types = {
            \ 'go'     : '--language-force=go',
            \ 'css'     : '--language-force=css',
            \ 'scss'     : '--language-force=scss',
            \ 'js'     : '--language-force=js',
            \ 'coffee'     : '--language-force=coffee',
            \ 'markdown'     : '--language-force=markdown'
            \ }


Bundle 'gmarik/github-search.vim'
" :GHSearchRepo something

" vim:tw=78:sw=4:ts=8:et:fdm=marker:ft=vim:norl:
