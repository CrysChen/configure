" =============== Vundle Initialization ===============
if has('vim_starting')
  set runtimepath+=~/.vim/bundle/vundle/
endif
call vundle#rc()
Bundle 'gmarik/vundle'
Bundle 'L9'

set runtimepath+=$GOROOT/misc/vim
set runtimepath+=/usr/share/go/misc/vim/

" Ruby & Rails
Bundle 'vim-ruby/vim-ruby'
Bundle 'tpope/vim-rails'
Bundle 'tpope/vim-rake'
Bundle 'tpope/vim-bundler'
Bundle 'tpope/vim-dispatch'
" ~/.vim/macros/rails.vim

" + to expand, - to shrink
Bundle 'terryma/vim-expand-region'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" TMUX
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Bundle 'tpope/vim-tbone'
" Tmux, Tput, Twrite, Tyank

" Send command from vim to a running tmux session
Bundle 'benmills/vimux'
" Prompt for a command to run
map <Leader>tp :VimuxPromptCommand<CR>
" Run last command executed by VimuxRunCommand
map <Leader>tl :VimuxRunLastCommand<CR>
" Inspect runner pane
map <Leader>ti :VimuxInspectRunner<CR>
" Close all other tmux panes in current window
map <Leader>tx :VimuxClosePanes<CR>
" Close vim tmux runner opened by VimuxRunCommand
map <Leader>tq :VimuxCloseRunner<CR>
" Interrupt any command running in the runner pane
map <Leader>ts :VimuxInterruptRunner<CR>
let g:VimuxHeight = "25"

Bundle 'skalnik/vim-vroom'
let g:vroom_use_vimux = 1
let g:vroom_map_keys = 0
let g:vroom_write_all = 1
autocmd FileType ruby map <Leader>tr :VroomRunTestFile<CR>
autocmd FileType ruby map <Leader>tR :VroomRunNearestTest<CR>

Bundle 'benmills/vimux-golang'
autocmd FileType go map <Leader>tr :GolangTestCurrentPackage<CR>


" Bundle 'yesmeck/tips.vim'

Bundle 'mhinz/vim-signify'
let g:signify_mapping_next_hunk = '<leader>sj'
let g:signify_mapping_prev_hunk = '<leader>sk'
let g:signify_mapping_toggle = '<leader>sh'
let g:signify_mapping_toggle_highlight = '<leader>sl'

Bundle 'jade.vim'
Bundle 'tpope/vim-ragtag'
" <C-X>= <C-X>+ <C-X>- <C-X>_ <C-X>' <C-X>" <C-X><Space> <C-X><CR> <C-X>/ <C-X>! <C-X>@ <C-X># <C-X>$
Bundle 'tpope/vim-eunuch'
" :Unlink :Remove :Rename :SudoWrite :W
Bundle 'tpope/vim-unimpaired'
" ]o, [o, ]n, [n
" ]e, [e               Exchange the current line with lines above/below it
" ]<Space>, [<Spance>  Add [count] blank lines above/below the cursor.
" `[x` XML encode, `]x` XML decode, `[u` URL encode, `]u` URL decode, `[y` C String encode, `]y` C String decode

Bundle 'tpope/vim-surround'
" cs'<q>, cst", dst, ys2w), yss), v<move>S)

Bundle 'tpope/vim-abolish'
" :Abolish {despa,sepe}rat{e,es,ed,ing,ely,ion,ions,or}  {despe,sepa}rat{}
" :%Subvert/facilit{y,ies}/building{,s}/g

" GIT
Bundle 'tpope/vim-git'
Bundle 'tpope/vim-fugitive'
Bundle 'int3/vim-extradite'
Bundle 'tpope/vim-rhubarb'
" ~/.vim/bundle/vim-fugitive/doc/fugitive.txt
map <Leader>gs :Gstatus<CR>
map <Leader>gb :Gblame<CR>
map <Leader>gd :Git! diff %<CR>
map <Leader>gc :Gcommit<CR>
map <Leader>gl :Extradite<CR>


Bundle 'Gist.vim'

" Snippet
Bundle 'SirVer/ultisnips'
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

Bundle 'VisIncr'
Bundle 'Align'

Bundle 'tComment'
" ~/.vim/bundle/tComment/doc/tcomment.txt

Bundle 'mileszs/ack.vim'
let g:ackprg = 'ag --nogroup --nocolor --column' " the_silver_searcher
map <Leader>a :Ack 
" o (open) go (preview open) t (tab) T (new tab silently) v (vertical) gv q (close)

" Bundle 'AutoComplPop'
Bundle 'Shougo/neocomplcache'
let g:neocomplcache_enable_at_startup = 1
let g:neocomplcache_enable_smart_case = 1
let g:neocomplcache_enable_camel_case_completion = 1
let g:neocomplcache_enable_underbar_completion = 1
let g:neocomplcache_auto_completion_start_length = 1
let g:neocomplcache_min_syntax_length = 3
let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'
let g:neocomplcache_max_list = 50
let g:neocomplcache_enable_auto_select = 1
let g:neocomplcache_enable_fuzzy_completion = 1
let g:neocomplcache_fuzzy_completion_start_length = 2
let g:neocomplcache_enable_cursor_hold_i = 0
let g:neocomplcache_cursor_hold_i_time = 300
let g:neocomplcache_enable_insert_char_pre = 0
let g:neocomplcache_enable_prefetch = 0

let g:neocomplcache_dictionary_filetype_lists = {
            \ 'default' : ''
            \ }

if !exists('g:neocomplcache_wildcard_characters')
  let g:neocomplcache_wildcard_characters = {}
endif
let g:neocomplcache_wildcard_characters._ = '-'
let g:neocomplcache_enable_auto_delimiter = 1

inoremap <expr><C-y>  neocomplcache#cancel_popup()
" Enable heavy omni completion.
if !exists('g:neocomplcache_omni_patterns')
  let g:neocomplcache_omni_patterns = {}
endif
let g:neocomplcache_omni_patterns.ruby = '[^. *\t]\.\w*\|\h\w*::'
let g:neocomplcache_omni_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
let g:neocomplcache_omni_patterns.c = '\%(\.\|->\)\h\w*'
let g:neocomplcache_omni_patterns.cpp = '\h\w*\%(\.\|->\)\h\w*\|\h\w*::'

let g:neocomplcache_omni_functions = {
      \ 'ruby' : 'rubycomplete#Complete',
      \ }


Bundle 'jsbeautify'
Bundle 'MultipleSearch'
Bundle 'reorder-tabs'
" <M-PgUp> / <M-PgDn>

Bundle 'sessionman.vim'
map <Leader>s :SessionList<CR>
" :SessionClose :SessionList :SessionOpen :SessionOpenLast :SessionSave :SessionSaveAs :SessionShowLast

Bundle 'scrooloose/nerdtree'
Bundle 'Glob-Edit'
" :edit plugin/*vim

Bundle 'tsaleh/vim-matchit'
" Bundle 'sketch.vim'
" Bundle 'hallettj/jslint.vim'
Bundle 'tyru/current-func-info.vim'

" Maintains a history of yanks
Bundle 'YankRing.vim'
" s search, also have value in clipboard

" LaTex
" Bundle 'imaps.vim'
" Bundle 'gerw/vim-latex-suite'

Bundle 'Raimondi/delimitMate'
" automatic closing of quotes, parenthesis, brackets

" ColorScheme
Bundle 'tpope/vim-vividchalk'

" Syntax Support
Bundle 'zim-syntax'
Bundle 'juvenn/mustache.vim'
Bundle 'tpope/vim-haml'
Bundle 'tpope/vim-markdown'
Bundle 'tpope/vim-liquid'
Bundle 'vim-coffee-script'
Bundle 'kogent/vim-nagios'
Bundle 'pangloss/vim-javascript'
Bundle 'cespare/mxml.vim'
Bundle 'nono/jquery.vim'
Bundle 'actionscript.vim'
Bundle 'sunaku/vim-ruby-minitest'

Bundle 'LargeFile'

Bundle 'VIM-Color-Picker'
" <F6> :ColorPicker
Bundle 'thinca/vim-quickrun'
" :QuickRun ruby / :QuickRun
Bundle 'Lokaltog/vim-easymotion'
" <Leader><Leader> f/F/w/e/b/ge/j/k
Bundle 'spiiph/vim-space'
" smart <Space>

Bundle 'sjl/gundo.vim'
let g:gundo_width = 60
let g:gundo_preview_height = 22
map <F9> :GundoToggle<CR>

Bundle 'Yggdroot/indentLine'
let g:indentLine_enabled=0
" map <F7> :IndentGuidesToggle <CR>

Bundle 'Lokaltog/vim-powerline'
let g:Powerline_stl_path_style='full'

Bundle 'gregsexton/MatchTag'
Bundle 'bronson/vim-visual-star-search'
Bundle 'majutsushi/tagbar'
nmap <F8> :TagbarToggle<CR>

Bundle 'kien/ctrlp.vim'
let g:ctrlp_extensions = ['changes', 'line', 'buffertag']
let g:ctrlp_max_files = 20000
let g:ctrlp_max_depth = 8
let g:ctrlp_use_caching = 1
let g:ctrlp_clear_cache_on_exit = 1
let g:ctrlp_cache_dir = $HOME.'/.cache/ctrlp'
let g:ctrlp_mruf_last_entered = 1
let g:ctrlp_follow_symlinks = 1
let g:ctrlp_max_height = 35
let g:ctrlp_match_window_reversed = 0
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
" let g:ctrlp_user_command = 'find %s -type f'
let g:ctrlp_prompt_mappings = {
      \ 'PrtSelectMove("j")':   ['<c-n>'],
      \ 'PrtSelectMove("k")':   ['<c-p>'],
      \ 'PrtHistory(-1)':       ['<c-j>'],
      \ 'PrtHistory(1)':        ['<c-k>']
      \}

let g:ctrlp_cmd = 'CtrlP'
map <Space>p :CtrlPMixed<CR>
map <Leader>b :CtrlPBuffer<CR>
map <Leader>r :CtrlPMRUFiles<CR>


Bundle 'gmarik/github-search.vim'
" :GHSearchRepo something

" vim:tw=78:sw=4:ts=8:et:fdm=marker:ft=vim:norl:
