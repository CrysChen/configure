#!/usr/bin/env ruby

require 'autotest/redgreen'
require 'autotest/timestamp'
require 'rnotify'
require 'gtk2'

module Autotest::RNotify
  class Notification
    attr_accessor :image_root, :tray_icon, :notification,
      :image_pass, :image_pending, :image_fail

    def initialize(timeout = 5000)
      self.image_root = "#{ENV['HOME']}/.autotest_images"

      Notify.init('Autotest') || raise('Failed to initialize Notify')

      self.tray_icon = Gtk::StatusIcon.new
      tray_icon.icon_name = 'face-monkey'
      tray_icon.tooltip = 'Autotest'

      self.notification = Notify::Notification.new('X', nil, nil, tray_icon)
      notification.timeout = timeout

      Thread.new { Gtk.main }
      sleep 1
      tray_icon.embedded? || raise('Failed to set up tray icon')
    end

    def notify(icon, tray, title, message)
      notification.update(title, message, nil)
      notification.pixbuf_icon = icon
      tray_icon.tooltip = "Last Result: #{message}"
      tray_icon.icon_name = tray
      notification.show
    end

    def passed(title, message)
      self.image_pass ||= Gdk::Pixbuf.new("#{image_root}/pass.png", 48,48)
      `mplayer ~/.autotest_images/pass.ogg -af volume=0 >/dev/null`
      notify(image_pass, 'face-smile', title, message)
    end

    def pending(title, message)
      self.image_pending ||= Gdk::Pixbuf.new("#{image_root}/pending.png",48,48)
      `mplayer ~/.autotest_images/pending.wav -af volume=-20 >/dev/null`
      notify(image_pending, 'face-plain', title, message)
    end

    def failed(title, message)
      self.image_fail ||= Gdk::Pixbuf.new("#{image_root}/fail.png", 48,48)
      `mplayer ~/.autotest_images/fail.wav -af volume=0 >/dev/null`
      notify(image_fail, 'face-sad', title, message)
    end

    def quit
      #Notify.uninit
      Gtk.main_quit
    end
  end

  Autotest.add_hook :initialize do |at|
    @notify = Notification.new
  end

  Autotest.add_hook :ran_command do |at|
    results = at.results.last

    unless results.nil?
      # Test::Unit
      if results.include? 'tests'
        output = results[/(\d+)\s+tests?,\s*(\d+)\s+assertions?,\s*(\d+)\s+failures?(,\s*(\d+)\s+errors)?/]
        if output
          tests    = $1
          failures = $3.to_i + $5.to_i
        end
        # RSpec
      else
        output = results[/(\d+)\s+examples?,\s*(\d+)\s+failures?(,\s*(\d+)\s+pending)?/]
        if output
          tests    = $1
          failures = $2.to_i
          pending  = $4.to_i
        end

        if    failures > 0
          @notify.failed("Tests Failed", output)
        elsif pending > 0
          @notify.pending("Tests Pending", output)
        elsif tests
          @notify.passed( at.tainted ? "All":"" + "Tests Passed", output)
        else  #Error
          @notify.failed("Syntax Error", output)
        end
      end
    end

    Autotest.add_hook :quit do |at|
      @notify.quit
    end

    Autotest.add_hook :run do |autotest|
      autotest.add_exception(/^\.\/vendor/)
      autotest.add_exception(/\.svn/)
      autotest.add_exception(/\.git/)
    end
  end
end
